#+AUTHOR: RAGHAV MITTAL
#+EMAIL: raghav.mittal@st.niituniversity.in
#+TITLE: SSS Studio Weaver

* Background
We were working on development of AnnoletJS and web services to demonstrate different features like
rennaration, tagging, highlighting. But as we progressed we realized that this was not scalable and the
best way to do this. AnnoletJS code needs to be modified for accommodating each web service. We decided to 
create webservices independent of annolet and let the annolet run the services on its own with minimal 
information provided by web service developer. So here we decided to break our project into three parts 
annolet, weaver, webservice.

* Requirements
The following are the functionalities required from weaver so that user must be able to use different 
webservices through annolet
+ Weaver must act as an interface between annolet and independent webservices.
+ Weaver should only list services which are active i.e. services whose servers are active.
+ Weaver must provide set of some functionalities which are common in most of the websevices.
  - These can be getXpath, evaluate Xpath
  - event handlers for tracking mouse pointer
  - user registration and validation.
+ It must be able to interect with a service if a JSON file giving information about functionality
and methods of web service is provided.

* Specs
The project is divided into three parts
| Backend            | Middle | Frontend |
|--------------------+--------+----------|
| JSON Manifest file | Weaver | Annolet  |
| CSS files          |        |          |
| JS files           |        |          |
| HTML files         |        |          |

*** Backend
+ JSON matadata file will be provide information about web services.
+ metadata file contains information about location of webservice related files and action to
be performed by user  
  - name of button to be created
  - HTML and CSS files for UI
  - JS files for functionality and interaction with server
  - what to do on click of button
**** Webservice
+ These are the independent microservices for performing different tasks
*** Middle
Middle depends on backend. Frontend depends on middle.
+ Weaver will act as a broker between webservices and annolet.
+ It will have few of its own feature like user validation, getXpath, evaluateXpath.
*** Frontend (annolet)
+ Must load either from SSS Studio portal or in form of bookmarklet
+ Weaver will take services from backend and weave them into Annolet which is the frontend.
+ Here user can interact with these services.

* Design
+ format of metadata file
 ++ may contain much more options, not decided yet.
 ++ the format of this file must be provided from weaver developer side.
 ++ for now it looks like this
#+begin_src js
{
 webServiceName:'' ,
 authorName:'' ,
 btn-name:'' ,
 jsFiles:['',] ,
 htmlFiles:['',] ,
 cssFiles:['',] ,
}
#+end_src
 
- /jsFiles/ : array of file(s) which contain the minimum required javascript which must be loaded on frontend to run the webservice. 
- /htmlFiles/ & /cssFiles/: array of HTML and CSS files required for extra UI additional to annolet (if required).
+ A function will populate Annolet menu after going through all metadata files.

#+CAPTION: Design
#+NAME: fig:design.png
[[./design.png]]

* Code
** mock json file
#+NAME: mock JSON file
#+begin_src js :tangle webservices/mock.json
{
 authorName: 'Raghav',
 serviceName: 'mock',
 buttonName: 'button',
 cssFile: ['path.css'],
 htmlFile: ['path.html'],
 jsFile: ['path.js']
}
#+end_src
** function fetchMetadata()
This function reads json files and bring them to local machine for faster access.
** function populate()
This function should find read json metadata and populate all annolet menu according to the button names.
#+begin_src js

#+end_src
** function getCSS(buttonName)
Get the CSS files corresponding to button name.
** function injectFile(buttonName, fileType)
fetches files from other servers to inject into DOM of present URL.
